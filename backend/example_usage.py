#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Pacific.ai Vector Matching Module
"""

import asyncio
import httpx
import json
from typing import Dict, Any

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://localhost:8001"

async def create_embedding(client: httpx.AsyncClient, entity_data: Dict[str, Any]) -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–µ—Ç embedding –¥–ª—è —Å—É—â–Ω–æ—Å—Ç–∏"""
    response = await client.post(f"{API_BASE_URL}/api/embeddings", json=entity_data)
    response.raise_for_status()
    return response.json()

async def find_matches(client: httpx.AsyncClient, candidate_id: str, top_k: int = 5) -> Dict[str, Any]:
    """–ù–∞—Ö–æ–¥–∏—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
    request_data = {
        "candidate_id": candidate_id,
        "top_k": top_k,
        "min_score": 0.3
    }
    response = await client.post(f"{API_BASE_URL}/api/matches", json=request_data)
    response.raise_for_status()
    return response.json()

async def get_explanation(client: httpx.AsyncClient, candidate_id: str, vacancy_id: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è"""
    response = await client.get(f"{API_BASE_URL}/api/matches/{candidate_id}/{vacancy_id}")
    response.raise_for_status()
    return response.json()

async def update_weights(client: httpx.AsyncClient, weights: Dict[str, float]) -> Dict[str, Any]:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–µ—Å–∞ –º—ç—Ç—á–∏–Ω–≥–∞"""
    request_data = {"weights": weights}
    response = await client.post(f"{API_BASE_URL}/api/weights", json=request_data)
    response.raise_for_status()
    return response.json()

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Pacific.ai Vector Matching Module")
    print("=" * 60)
    
    async with httpx.AsyncClient(timeout=30.0) as client:
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–∞
            print("\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞...")
            health_response = await client.get(f"{API_BASE_URL}/health")
            health_data = health_response.json()
            print(f"   –°—Ç–∞—Ç—É—Å: {health_data['status']}")
            print(f"   –°–µ—Ä–≤–∏—Å—ã: {health_data['services']}")
            
            # 2. –°–æ–∑–¥–∞–µ–º embeddings –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            print("\n2. –°–æ–∑–¥–∞–Ω–∏–µ embeddings –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞...")
            
            candidate_embeddings = [
                {
                    "entity_id": "candidate_001",
                    "entity_type": "candidate",
                    "text": "–Ø Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å 5-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã —Å FastAPI, Django, PostgreSQL, Docker. –£—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.",
                    "category": "skills",
                    "metadata": {"experience_years": 5, "location": "Moscow"}
                },
                {
                    "entity_id": "candidate_001",
                    "entity_type": "candidate",
                    "text": "–°—Ç—Ä–µ–º–ª—é—Å—å –∫ –∫–∞—Ä—å–µ—Ä–Ω–æ–º—É —Ä–æ—Å—Ç—É –≤ –æ–±–ª–∞—Å—Ç–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ AI. –•–æ—á—É —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ —Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏.",
                    "category": "career",
                    "metadata": {"career_goals": ["ML", "AI"], "motivation": "high"}
                },
                {
                    "entity_id": "candidate_001",
                    "entity_type": "candidate",
                    "text": "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é agile-–º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏, —Ä–∞–±–æ—Ç—É –≤ –∫–æ–º–∞–Ω–¥–µ, –æ—Ç–∫—Ä—ã—Ç–æ–µ –æ–±—â–µ–Ω–∏–µ. –ì–æ—Ç–æ–≤ –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ –∏ –≥–∏–±–∫–æ–º—É –≥—Ä–∞—Ñ–∏–∫—É.",
                    "category": "culture",
                    "metadata": {"work_style": "agile", "remote_ok": True}
                },
                {
                    "entity_id": "candidate_001",
                    "entity_type": "candidate",
                    "text": "–û–∂–∏–¥–∞—é –∑–∞—Ä–ø–ª–∞—Ç—É –æ—Ç 200,000 –¥–æ 300,000 —Ä—É–±–ª–µ–π. –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é –æ–ø—Ü–∏–æ–Ω—ã, –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é —Å—Ç—Ä–∞—Ö–æ–≤–∫—É, –æ–±—É—á–µ–Ω–∏–µ –∑–∞ —Å—á–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏.",
                    "category": "salary",
                    "metadata": {"salary_min": 200000, "salary_max": 300000, "benefits": ["options", "insurance", "training"]}
                }
            ]
            
            for embedding_data in candidate_embeddings:
                result = await create_embedding(client, embedding_data)
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω embedding –¥–ª—è {embedding_data['category']}: {result['vector_id']}")
            
            # 3. –°–æ–∑–¥–∞–µ–º embeddings –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π
            print("\n3. –°–æ–∑–¥–∞–Ω–∏–µ embeddings –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π...")
            
            vacancy_embeddings = [
                {
                    "entity_id": "vacancy_001",
                    "entity_type": "vacancy",
                    "text": "–ò—â–µ–º Senior Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FastAPI, PostgreSQL, –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞–º–∏. –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å Docker, Kubernetes, Redis.",
                    "category": "skills",
                    "metadata": {"company": "TechCorp", "level": "Senior", "technologies": ["Python", "FastAPI", "PostgreSQL", "Docker", "Kubernetes", "Redis"]}
                },
                {
                    "entity_id": "vacancy_001",
                    "entity_type": "vacancy",
                    "text": "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–∞—Ä—å–µ—Ä–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ –¥–æ Tech Lead, —Ä–∞–±–æ—Ç–∞ —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏, —É—á–∞—Å—Ç–∏–µ –≤ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏—è—Ö.",
                    "category": "career",
                    "metadata": {"growth_opportunities": True, "tech_stack": "modern", "architecture": True}
                },
                {
                    "entity_id": "vacancy_001",
                    "entity_type": "vacancy",
                    "text": "Agile-–∫–æ–º–∞–Ω–¥–∞, —É–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –≥–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫, –æ—Ç–∫—Ä—ã—Ç–∞—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –∫—É–ª—å—Ç—É—Ä–∞, —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤—ã.",
                    "category": "culture",
                    "metadata": {"methodology": "agile", "remote": True, "flexible_hours": True, "culture": "open"}
                },
                {
                    "entity_id": "vacancy_001",
                    "entity_type": "vacancy",
                    "text": "–ó–∞—Ä–ø–ª–∞—Ç–∞ 250,000 - 350,000 —Ä—É–±–ª–µ–π, –æ–ø—Ü–∏–æ–Ω—ã, –î–ú–°, –æ–±—É—á–µ–Ω–∏–µ, –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ—Ñ–∏—Å.",
                    "category": "salary",
                    "metadata": {"salary_min": 250000, "salary_max": 350000, "benefits": ["options", "dms", "training", "events", "modern_office"]}
                }
            ]
            
            for embedding_data in vacancy_embeddings:
                result = await create_embedding(client, embedding_data)
                print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω embedding –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ {embedding_data['entity_id']} ({embedding_data['category']}): {result['vector_id']}")
            
            # 4. –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            print("\n4. –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π...")
            matches = await find_matches(client, "candidate_001", top_k=3)
            print(f"   –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {matches['total_found']}")
            print(f"   –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {matches['search_time_ms']:.2f}ms")
            print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Å–∞: {matches['weights_used']}")
            
            for i, match in enumerate(matches['matches'], 1):
                print(f"\n   üéØ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ #{i}:")
                print(f"      –í–∞–∫–∞–Ω—Å–∏—è: {match['vacancy_id']}")
                print(f"      –û–±—â–∏–π –±–∞–ª–ª: {match['match_score']:.3f}")
                print(f"      –ë–∞–ª–ª—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
                for category, score in match['category_scores'].items():
                    print(f"        - {category.value}: {score:.3f}")
                if match.get('metadata'):
                    print(f"      –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {match['metadata']}")
            
            # 5. –ü–æ–ª—É—á–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –¥–ª—è —Ç–æ–ø —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
            if matches['matches']:
                print("\n5. –û–±—ä—è—Å–Ω–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π...")
                for i, match in enumerate(matches['matches'][:2], 1):  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2
                    print(f"\n   üìù –û–±—ä—è—Å–Ω–µ–Ω–∏–µ #{i} (–∫–∞–Ω–¥–∏–¥–∞—Ç candidate_001 -> –≤–∞–∫–∞–Ω—Å–∏—è {match['vacancy_id']}):")
                    try:
                        explanation = await get_explanation(client, "candidate_001", match['vacancy_id'])
                        print(f"      –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {explanation['explanation']}")
                        if explanation.get('key_factors'):
                            print(f"      –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã: {', '.join(explanation['key_factors'])}")
                        if explanation.get('improvement_suggestions'):
                            print(f"      –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:")
                            for suggestion in explanation['improvement_suggestions']:
                                print(f"        - {suggestion}")
                    except Exception as e:
                        print(f"      ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è: {e}")
            
            # 6. –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å–∞ –º—ç—Ç—á–∏–Ω–≥–∞
            print("\n6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤ –º—ç—Ç—á–∏–Ω–≥–∞...")
            new_weights = {
                "skills": 0.5,    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –Ω–∞–≤—ã–∫–æ–≤
                "career": 0.3,    # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞—Ä—å–µ—Ä—É
                "culture": 0.15,  # –£–º–µ–Ω—å—à–∞–µ–º –∫—É–ª—å—Ç—É—Ä—É
                "salary": 0.05    # –£–º–µ–Ω—å—à–∞–µ–º –∑–∞—Ä–ø–ª–∞—Ç—É
            }
            
            weights_result = await update_weights(client, new_weights)
            print(f"   ‚úÖ –í–µ—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {weights_result['updated_weights']}")
            
            # 7. –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Å –Ω–æ–≤—ã–º–∏ –≤–µ—Å–∞–º–∏
            print("\n7. –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Å –Ω–æ–≤—ã–º–∏ –≤–µ—Å–∞–º–∏...")
            matches_v2 = await find_matches(client, "candidate_001", top_k=3)
            print(f"   –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: {matches_v2['total_found']}")
            print(f"   –ù–æ–≤—ã–µ –≤–µ—Å–∞: {matches_v2['weights_used']}")
            
            for i, match in enumerate(matches_v2['matches'], 1):
                print(f"   üéØ –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ #{i}: {match['vacancy_id']} (–±–∞–ª–ª: {match['match_score']:.3f})")
            
            print("\nüéâ –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
        except httpx.HTTPStatusError as e:
            print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {e.response.status_code} - {e.response.text}")
        except httpx.RequestError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    print("‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8001")
    print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python run_server.py")
    print()
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
